import React, { useState } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Input } from './ui/input';
import { Badge } from './ui/badge';
import { Zap, Search, Copy, Heart, Star, Crown } from 'lucide-react';
import { toast } from 'sonner@2.0.3';

interface SpecialCharsProps {
  text: string;
  setText: (text: string) => void;
  onTextChange: (text: string) => void;
}

export function SpecialChars({ text, setText, onTextChange }: SpecialCharsProps) {
  const [searchTerm, setSearchTerm] = useState('');

  const insertChar = (char: string) => {
    const newText = text + char;
    setText(newText);
    onTextChange(newText);
    toast.success(`–°–∏–º–≤–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω`);
  };

  const copyChar = async (char: string) => {
    try {
      await navigator.clipboard.writeText(char);
      toast.success(`–°–∏–º–≤–æ–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  };

  // Simplified symbol definitions to avoid syntax issues
  const punctuationChars = [
    { char: '‚Ä¶', name: '–ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ' },
    { char: '‚Äì', name: '–°—Ä–µ–¥–Ω–µ–µ —Ç–∏—Ä–µ' },
    { char: '‚Äî', name: '–î–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ' },
    { char: '¬´', name: '–õ–µ–≤—ã–µ –∫–∞–≤—ã—á–∫–∏' },
    { char: '¬ª', name: '–ü—Ä–∞–≤—ã–µ –∫–∞–≤—ã—á–∫–∏' },
    { char: '"', name: '–õ–µ–≤—ã–µ –∫–∞–≤—ã—á–∫–∏' },
    { char: '"', name: '–ü—Ä–∞–≤—ã–µ –∫–∞–≤—ã—á–∫–∏' }
  ];

  const arrowChars = [
    { char: '‚Üê', name: '–°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ' },
    { char: '‚Üí', name: '–°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ' },
    { char: '‚Üë', name: '–°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö' },
    { char: '‚Üì', name: '–°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑' },
    { char: '‚Üî', name: '–°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ' },
    { char: '‚áê', name: '–î–≤–æ–π–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ' },
    { char: '‚áí', name: '–î–≤–æ–π–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ' }
  ];

  const mathChars = [
    { char: '¬±', name: '–ü–ª—é—Å-–º–∏–Ω—É—Å' },
    { char: '√ó', name: '–£–º–Ω–æ–∂–µ–Ω–∏–µ' },
    { char: '√∑', name: '–î–µ–ª–µ–Ω–∏–µ' },
    { char: '‚â†', name: '–ù–µ —Ä–∞–≤–Ω–æ' },
    { char: '‚â§', name: '–ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ' },
    { char: '‚â•', name: '–ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ' },
    { char: '‚àû', name: '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å' },
    { char: 'œÄ', name: '–ü–∏' },
    { char: '‚àö', name: '–ö–æ—Ä–µ–Ω—å' }
  ];

  const currencyChars = [
    { char: '‚Ç¨', name: '–ï–≤—Ä–æ' },
    { char: '¬£', name: '–§—É–Ω—Ç' },
    { char: '¬•', name: '–ô–µ–Ω–∞' },
    { char: '¬¢', name: '–¶–µ–Ω—Ç' },
    { char: '‚ÇΩ', name: '–†—É–±–ª—å' },
    { char: '‚Ç¥', name: '–ì—Ä–∏–≤–Ω–∞' }
  ];

  const symbolChars = [
    { char: '¬©', name: '–ö–æ–ø–∏—Ä–∞–π—Ç' },
    { char: '¬Æ', name: '–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞' },
    { char: '‚Ñ¢', name: '–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞' },
    { char: '¬ß', name: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ' },
    { char: '‚Ä¢', name: '–ë—É–ª–ª–µ—Ç' },
    { char: '‚òÖ', name: '–ó–≤–µ–∑–¥–∞' },
    { char: '‚òÜ', name: '–ó–≤–µ–∑–¥–∞ –ø—É—Å—Ç–∞—è' },
    { char: '‚ô†', name: '–ü–∏–∫–∏' },
    { char: '‚ô£', name: '–¢—Ä–µ—Ñ—ã' },
    { char: '‚ô•', name: '–ß–µ—Ä–≤—ã' },
    { char: '‚ô¶', name: '–ë—É–±–Ω—ã' }
  ];

  const emojiChars = [
    { char: 'üòÄ', name: '–£–ª—ã–±–∫–∞' },
    { char: 'üòÇ', name: '–°–º–µ—Ö' },
    { char: 'üòç', name: '–í–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å' },
    { char: 'ü§î', name: '–ó–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å' },
    { char: 'üòé', name: '–ö—Ä—É—Ç–æ—Å—Ç—å' },
    { char: 'üëç', name: '–õ–∞–π–∫' },
    { char: 'üëé', name: '–î–∏–∑–ª–∞–π–∫' },
    { char: '‚ù§Ô∏è', name: '–°–µ—Ä–¥—Ü–µ' },
    { char: 'üî•', name: '–û–≥–æ–Ω—å' },
    { char: '‚ö°', name: '–ú–æ–ª–Ω–∏—è' }
  ];

  const categories = [
    { id: 'punctuation', label: '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', chars: punctuationChars },
    { id: 'arrows', label: '–°—Ç—Ä–µ–ª–∫–∏', chars: arrowChars },
    { id: 'math', label: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', chars: mathChars },
    { id: 'currency', label: '–í–∞–ª—é—Ç—ã', chars: currencyChars },
    { id: 'symbols', label: '–°–∏–º–≤–æ–ª—ã', chars: symbolChars },
    { id: 'emojis', label: '–≠–º–æ–¥–∑–∏', chars: emojiChars }
  ];

  const filteredCategories = categories.map(category => ({
    ...category,
    chars: category.chars.filter(item => 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.char.includes(searchTerm)
    )
  })).filter(category => category.chars.length > 0);

  const renderCharGrid = (chars: typeof punctuationChars) => (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
      {chars.map((item, index) => (
        <Card key={index} style={{ backgroundColor: '#2A3441', borderColor: '#374151' }}>
          <CardContent className="p-3">
            <div className="flex items-center justify-between mb-2">
              <span className="text-2xl">{item.char}</span>
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => insertChar(item.char)}
                  className="h-6 w-6 p-0"
                >
                  +
                </Button>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => copyChar(item.char)}
                  className="h-6 w-6 p-0"
                >
                  <Copy className="h-3 w-3" />
                </Button>
              </div>
            </div>
            <div className="text-xs" style={{ color: '#9CA3AF' }}>
              <div className="font-medium">{item.name}</div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <Card style={{ backgroundColor: '#232B3A', borderColor: '#374151' }}>
        <CardHeader>
          <CardTitle className="flex items-center gap-2" style={{ color: '#E8EAED' }}>
            <Zap className="h-5 w-5" />
            –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4" style={{ color: '#9CA3AF' }} />
            <Input
              placeholder="–ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
              style={{ backgroundColor: '#2A3441', borderColor: '#374151', color: '#E8EAED' }}
            />
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="punctuation" className="w-full">
        <TabsList className="grid w-full grid-cols-3 lg:grid-cols-6">
          {categories.map((category) => (
            <TabsTrigger key={category.id} value={category.id} className="text-xs">
              {category.label}
            </TabsTrigger>
          ))}
        </TabsList>

        {categories.map((category) => (
          <TabsContent key={category.id} value={category.id}>
            <Card style={{ backgroundColor: '#232B3A', borderColor: '#374151' }}>
              <CardHeader>
                <CardTitle className="flex items-center gap-2" style={{ color: '#E8EAED' }}>
                  <Badge variant="secondary">{category.chars.length}</Badge>
                  {category.label}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {renderCharGrid(category.chars)}
              </CardContent>
            </Card>
          </TabsContent>
        ))}
      </Tabs>

      {filteredCategories.length === 0 && searchTerm && (
        <Card style={{ backgroundColor: '#2A3441', borderColor: '#374151' }}>
          <CardContent className="text-center py-8">
            <Search className="h-12 w-12 mx-auto mb-4" style={{ color: '#9CA3AF' }} />
            <p style={{ color: '#9CA3AF' }}>
              –°–∏–º–≤–æ–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </p>
          </CardContent>
        </Card>
      )}

      {!searchTerm && (
        <Card style={{ backgroundColor: '#232B3A', borderColor: '#374151' }}>
          <CardHeader>
            <CardTitle style={{ color: '#E8EAED' }}>–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–±–æ—Ä—ã</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
              <Button
                variant="outline"
                onClick={() => insertChar('‚ô• ‚ô° ‚ù§Ô∏è üíô üíö üíõ')}
              >
                <Heart className="h-4 w-4 mr-1" />
                –°–µ—Ä–¥–µ—á–∫–∏
              </Button>
              <Button
                variant="outline"
                onClick={() => insertChar('‚òÖ ‚òÜ ‚ú¶ ‚úß ‚ú© ‚ú™')}
              >
                <Star className="h-4 w-4 mr-1" />
                –ó–≤—ë–∑–¥—ã
              </Button>
              <Button
                variant="outline"
                onClick={() => insertChar('‚Üê ‚Üí ‚Üë ‚Üì ‚Üî ‚áê ‚áí')}
              >
                –°—Ç—Ä–µ–ª–∫–∏
              </Button>
              <Button
                variant="outline"
                onClick={() => insertChar('$ ‚Ç¨ ¬£ ¬• ‚ÇΩ ‚Ç¥')}
              >
                <Crown className="h-4 w-4 mr-1" />
                –í–∞–ª—é—Ç—ã
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}